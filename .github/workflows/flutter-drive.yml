# Name of your workflow.
name: flutter drive # Trigger the workflow on push or pull request.
on: [push, pull_request] # A workflow run is made up of one or more jobs.
jobs:
  test:
    #The type of machine to run the job on. [windows,macos, ubuntu , self-hosted]
    runs-on: macos-latest
    #sequence of tasks called
    steps:
      # The branch or tag ref that triggered the workflow will be checked out.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v1
      # Setup a flutter environment.
      # https://github.com/marketplace/actions/flutter-action
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.12.14'
          channel: 'dev'
      - run: flutter pub get
      # run static analys code
      - run: flutter  analyze
      # run  flutter widgets tests  and unit tests
      - run: flutter test --coverage

  # id of job, a string that is unique to the "jobs" node above.
  drive_ios:
    #creates a build matrix for your jobs
    strategy:
      #set of different configurations of the virtual environment.
      matrix:
        device:
        - "iPhone 8 (13.1)"
        - "iPhone 11 Pro Max (13.1)"
      fail-fast: false
    #if conditional to prevent a job from running
    if: github.event_name != 'pull_request'
    runs-on: macos-latest
    #Identifies any jobs that must complete successfully before this job will run.
    needs: test
    steps:
      - name: List all simulators
        run: xcrun instruments -s
      # get UUID  simulator and boot a simulator on mac from  command line
      - name: Start Simulator
        run: |
          UDID=$(
            xcrun instruments -s |
            awk \
              -F ' *[][]' \
              -v 'device=${{ matrix.device }}' \
              '$1 == device { print $2 }'
          )
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v1
        with:
          flutter-version: '1.12.14'
          channel: 'dev'
      # Run flutter integrate tests
      - name: Run Flutter Driver tests
        run: flutter drive --target=test_driver/app.dart
